const path = require('path');
const { Configuration } = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const TerserWebpackPlugin = require('terser-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const WebpackBar = require('webpackbar')
const isProduction = process.env.NODE_ENV === 'production';
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
const { BundleAnalyzerPlugin } = require("webpack-bundle-analyzer");
const getStyleLoaders = preProcessor => {
    return [
        isProduction ? MiniCssExtractPlugin.loader : 'style-loader',
        'css-loader',
        {
            loader: 'postcss-loader',
            options: {
                postcssOptions: {
                    plugins: ['postcss-preset-env'],
                },
            },
        },
        preProcessor && {
            loader: preProcessor,
        },
    ].filter(Boolean);
};
module.exports = {
    entry: './src/main.<%if (useTs) {%>tsx<% } else { %>jsx<%}%>',
    output: {
        path: isProduction ? path.resolve(__dirname, '../dist') : undefined,
        filename: isProduction ? 'static/js/[name].[contenthash:10].js' : 'static/js/[name].js',
        chunkFilename: isProduction
            ? 'static/js/[name].[contenthash:10].chunk.js'
            : 'static/js/[name].chunk.js',
        assetModuleFilename: 'static/js/[hash:10][ext][query]',
        clean: true,
    },
    module: {
        rules: [
            {
                oneOf: [
                    {
                        test: /\.css$/,
                        use: getStyleLoaders(),
                    },
                    <% const postProcessors = ['sass', 'less', 'stylus']; %>
                    <%
                        const cssProcessorRegMap = {
                            sass: `\.s[ac]ss$`,
                            less: `\.less$`,
                            stylus: `\.styl$`,
                        };
                    %>
                    <%if (useCssProcessor && postProcessors.includes(cssProcessor) ) {%>
                        {
                            test: /<%= cssProcessorRegMap[cssProcessor] %>/,
                            use: getStyleLoaders('<%= cssProcessor %>-loader'),
                        },
                    <%}%>
                    {
                        test: /\.(png|jpe?g|gif|webp|svg|ico)$/,
                        type: 'asset',
                        parser: {
                            dataUrlCondition: {
                                maxSize: 8 * 1024,
                            },
                        },
                        generator: {
                            filename: 'image/[name].[hash:8][ext]',
                        },
                    },
                    {
                        test: /\.(woff2?|eot|ttf|otf|mp3|mp4|avi|mkv)$/,
                        type: 'asset/resource',
                        generator: {
                            filename: 'media/[name].[hash:8][ext]',
                        },
                    },
                    {
                        oneOf: [
                            {
                                test: /\.(jsx|js<% if (useTs) {%>|tsx|ts<% } %>)?$/,
                                exclude: /node_modules/,
                                use: [
                                    { loader: 'thread-loader' },
                                    {
                                        loader: 'babel-loader',
                                        options: {
                                            presets: [
                                                '@babel/preset-env',
                                                '@babel/preset-react',
                                                <% if (useTs) { %> '@babel/preset-typescript' <% } %>
                                            ],
                                            cacheDirectory: true,
                                            cacheCompression: false,
                                            plugins: [
                                                !isProduction && 'react-refresh/babel',
                                                '@babel/plugin-transform-runtime',
                                            ].filter(Boolean),
                                        },
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        ],
    },
    plugins: [
        isProduction && new BundleAnalyzerPlugin({
            analyzerMode: "disabled",
            generateStatsFile: true,
        }),
        new HtmlWebpackPlugin({
            template: path.resolve(__dirname, './index.html'),
        }),
        isProduction &&
            new MiniCssExtractPlugin({
                filename: 'static/css/[name].[contenthash:10].css',
                chunkFilename: 'static/css/[name].[contenthash:10].chunk.css',
            }),
        !isProduction && new ReactRefreshWebpackPlugin(),
        new CopyPlugin({
            patterns: [
                {
                    from: path.resolve(__dirname, './public'),
                    to: path.resolve(__dirname, './dist'),
                    toType: 'dir',
                    noErrorOnMissing: true,
                    globOptions: {
                        ignore: ['**/index.html'],
                    },
                    info: {
                        minimized: true,
                    },
                },
            ],
        }),
        new WebpackBar()
    ].filter(Boolean),
    optimization: {
        minimize: isProduction,
        minimizer: [
            new CssMinimizerPlugin(),
            new TerserWebpackPlugin({
                parallel: true,
                terserOptions: {
                    compress: {
                        drop_console: true,
                        drop_debugger: true,
                    }
                },
            }),
        ],
        splitChunks: {
            chunks: 'all',
            cacheGroups: {
                reactBase: {
                    name: 'reactBase',
                    test: /[\\\\/]node_modules[\\\\/](react|react-dom|react-router-dom)[\\\\/]/,
                    priority: 10,
                    chunks: 'all',
                },
                common: {
                    name: 'common',
                    minChunks: 2,
                    priority: 5,
                    chunks: 'all',
                },
            },
        },
        runtimeChunk: {
            name: entrypoint => `runtime-${entrypoint.name}`,
        },
    },
    resolve: {
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
        alias: {
            '@': path.resolve(__dirname, './src'),
        },
    },
    devServer: {
        open: true,
        host: '127.0.0.1',
        port: <%= port %>,
        hot: true,
        compress: true,
        historyApiFallback: true,
    },
    mode: isProduction ? 'production' : 'development',
    devtool: isProduction ? 'source-map' : 'cheap-module-source-map',
    performance: {
        hints: false,
        maxEntrypointSize: 512000,
        maxAssetSize: 512000
    }
};